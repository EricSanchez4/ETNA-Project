{"version":3,"sources":["http-common.js","services/upload-files.service.js","components/upload-files.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","file","onUploadProgress","formData","FormData","append","http","post","UploadFiles","props","selectFile","bind","upload","state","selectedFiles","undefined","currentFile","progress","message","event","this","setState","target","files","UploadService","Math","round","loaded","total","then","response","data","catch","e","console","log","className","role","aria-valuenow","aria-valuemin","aria-valuemax","style","width","type","onChange","disabled","onClick","Component","App","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"wTAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,wBACTC,QAAS,CACP,eAAgB,sBCYL,M,+FAdNC,EAAMC,GACX,IAAIC,EAAW,IAAIC,SAInB,OAFAD,EAASE,OAAO,OAAQJ,GAEjBK,EAAKC,KAAK,eAAgBJ,EAAU,CACzCH,QAAS,CACP,eAAgB,uBAElBE,yB,MCTeM,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBAEd,EAAKE,MAAQ,CACXC,mBAAeC,EACfC,iBAAaD,EACbE,SAAU,EACVC,QAAS,IATM,E,uDAcRC,GACTC,KAAKC,SAAS,CACZP,cAAeK,EAAMG,OAAOC,U,+BAItB,IAAD,OACHP,EAAcI,KAAKP,MAAMC,cAAc,GAE3CM,KAAKC,SAAS,CACZJ,SAAU,EACVD,YAAaA,IAGfQ,EAAcZ,OAAOI,GAAa,SAACG,GACjC,EAAKE,SAAS,CACZJ,SAAUQ,KAAKC,MAAO,IAAMP,EAAMQ,OAAUR,EAAMS,YAGnDC,MAAK,SAACC,GACL,EAAKT,SAAS,CACZH,QAASY,EAASC,KAAKb,aAG1Bc,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZ,EAAKZ,SAAS,CACZJ,SAAU,EACVC,QAAS,6BACTF,iBAAaD,OAInBK,KAAKC,SAAS,CACZP,mBAAeC,M,+BAIT,IAAD,EAMHK,KAAKP,MAJPC,EAFK,EAELA,cACAE,EAHK,EAGLA,YACAC,EAJK,EAILA,SACAC,EALK,EAKLA,QAGF,OACE,6BACGF,GACC,yBAAKoB,UAAU,YACb,yBACEA,UAAU,sDACVC,KAAK,cACLC,gBAAerB,EACfsB,gBAAc,IACdC,gBAAc,MACdC,MAAO,CAAEC,MAAOzB,EAAW,MAE1BA,EARH,MAaJ,2BAAOmB,UAAU,mBACf,2BAAOO,KAAK,OAAOC,SAAUxB,KAAKV,cAGpC,4BACE0B,UAAU,kBACVS,UAAW/B,EACXgC,QAAS1B,KAAKR,QAHhB,UAQA,yBAAKwB,UAAU,oBAAoBC,KAAK,SACrCnB,Q,GA3F8B6B,aCgB1BC,MAbf,WACE,OACE,yBAAKZ,UAAU,YAAYK,MAAO,CAAEC,MAAO,UACzC,yBAAKD,MAAO,CAAEQ,OAAQ,SACpB,mDACA,gFAGF,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdhC,OAAM,SAAAiC,GACL/B,QAAQ+B,MAAMA,EAAM/C,c","file":"static/js/main.2cf8e27c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://127.0.0.1:8000\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\n\nclass UploadFilesService {\n  upload(file, onUploadProgress) {\n    let formData = new FormData();\n\n    formData.append(\"file\", file);\n\n    return http.post(\"/uploadfile/\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\",\n      },\n      onUploadProgress,\n    });\n  }\n}\n\nexport default new UploadFilesService();\n","import React, { Component } from \"react\";\nimport UploadService from \"../services/upload-files.service\";\n\nexport default class UploadFiles extends Component {\n  constructor(props) {\n    super(props);\n    this.selectFile = this.selectFile.bind(this);\n    this.upload = this.upload.bind(this);\n\n    this.state = {\n      selectedFiles: undefined,\n      currentFile: undefined,\n      progress: 0,\n      message: \"\",\n\n    };\n  }\n\n  selectFile(event) {\n    this.setState({\n      selectedFiles: event.target.files,\n    });\n  }\n\n  upload() {\n    let currentFile = this.state.selectedFiles[0];\n\n    this.setState({\n      progress: 0,\n      currentFile: currentFile,\n    });\n\n    UploadService.upload(currentFile, (event) => {\n      this.setState({\n        progress: Math.round((100 * event.loaded) / event.total),\n      });\n    })\n      .then((response) => {\n        this.setState({\n          message: response.data.message,\n        });\n      })\n      .catch((e) => {\n        console.log(e)\n        this.setState({\n          progress: 0,\n          message: \"Could not upload the file!\",\n          currentFile: undefined,\n        });\n      });\n\n    this.setState({\n      selectedFiles: undefined,\n    });\n  }\n\n  render() {\n    const {\n      selectedFiles,\n      currentFile,\n      progress,\n      message,\n    } = this.state;\n\n    return (\n      <div>\n        {currentFile && (\n          <div className=\"progress\">\n            <div\n              className=\"progress-bar progress-bar-info progress-bar-striped\"\n              role=\"progressbar\"\n              aria-valuenow={progress}\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              style={{ width: progress + \"%\" }}\n            >\n              {progress}%\n            </div>\n          </div>\n        )}\n\n        <label className=\"btn btn-default\">\n          <input type=\"file\" onChange={this.selectFile} />\n        </label>\n\n        <button\n          className=\"btn btn-success\"\n          disabled={!selectedFiles}\n          onClick={this.upload}\n        >\n          Upload\n        </button>\n\n        <div className=\"alert alert-light\" role=\"alert\">\n          {message}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport UploadFiles from \"./components/upload-files.component\";\n\nfunction App() {\n  return (\n    <div className=\"container\" style={{ width: \"600px\" }}>\n      <div style={{ margin: \"20px\" }}>\n        <h3>Par Amelie Roynette</h3>\n        <h4>Uploader de fichier en React + Python (FastAPI)</h4>\n      </div>\n\n      <UploadFiles />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}